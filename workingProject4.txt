/*
 * Zachary Allin
 * Susma Basel
 * Jeremy Bower
 */

/*
 * main.c
 *
 * Example of reading from the SD card
 * This will read the size of the SD card
 * And then read the first block of data.
 */

#include <msp430.h>
#include <string.h> //For mem copy
#include "MMC.h"
#include "hal_SPI.h"
#include "hal_MMC_hardware_board.h"


int table[] = {
        493,508,523,539,554,570,585,600,
        615,630,645,659,674,688,702,716,
        730,743,756,769,782,794,806,818,
        830,841,852,862,872,882,891,900,
        908,916,924,931,938,944,950,956,
        961,965,970,973,976,979,981,983,
        984,985,985,985,984,983,981,979,
        976,973,970,965,961,956,950,944,
        938,931,924,916,908,900,891,882,
        872,862,852,841,830,818,806,794,
        782,769,756,743,730,716,702,688,
        674,659,645,630,615,600,585,570,
        554,539,523,508,493,477,462,446,
        431,415,400,385,370,355,340,326,
        311,297,283,269,255,242,229,216,
        203,191,179,167,155,144,133,123,
        113,103,94,85,77,69,61,54,
        47,41,35,29,24,20,15,12,
        9,6,4,2,1,0,0,0,
        1,2,4,6,9,12,15,20,
        24,29,35,41,47,54,61,69,
        77,85,94,103,113,123,133,144,
        155,167,179,191,203,216,229,242,
        255,269,283,297,311,326,340,355,
        370,385,400,415,431,446,462,477
};


// 1 if the buffer is full, 0 if empty
char update_lock = 0;
// this buffer will be written into TACCR1 on update
unsigned int buffer = 0;
unsigned int sine_counter = 0;

#pragma vector=TIMER0_A0_VECTOR
__interrupt void TACCRO_INT()
{
    TACCR1 = buffer;
    //tell main to update the buffer
    update_lock = 0;
}


//Red onboard LED
const unsigned char LED = BIT0;
void main(void) {
    //Turn off the watchdog timer
    WDTCTL = WDTPW + WDTHOLD;

    P1DIR |= LED;
    P1OUT &= ~LED;

    //set P1.6 to TA0.1 control Green LED
    P1DIR |= BIT6;
    P1SEL |= BIT6;

    //16MHz
    //Set DCO to 16 MHz calibrated
    DCOCTL = CALDCO_16MHZ;
    BCSCTL1 = CALBC1_16MHZ;

    //Set up Timer A module
    TACCR0 = 1000;
    TACCR1 = 0;
    TACTL = MC_1 | ID_0 | TASSEL_2;

    //Enable an interrupt when TAR = TACCRO
    TACCTL0 = CCIE;

    //Turn on internal PWM system
    TA0CCTL1 = OUTMOD_7;

    __enable_interrupt();

    //variables needed for the WHILE looop
    int steps = 0;  //matched to phase

    //Reset SD card by cycling power
    //Credit to Boris Cherkasskiy and his blog post on Launchpad+MMC
    P2DIR |= BIT2;
    P2OUT &= ~BIT2;
    __delay_cycles(1600000);    // 100ms @ 16MHz
    P2OUT |= BIT2;
    __delay_cycles(1600000);    // 100ms @ 16MHz

    //Initialize MMC library
    while (MMC_SUCCESS != mmcInit());
    //Verify card ready
    while (MMC_SUCCESS != mmcPing());
    //Check the memory card size
    volatile unsigned long size = mmcReadCardSize();


    //Toggle the LED to indicate that reading was successful
    P1OUT ^= LED;

    //Test that the SD card is working
    //Read in the OEM name and version in bytes 3-10
    volatile unsigned char block[64] = {0};

    // Read in a 512 byte sector
    // This is a multipart process.
    // First you must mount the block, telling the SD card the relative offset
    // of your subsequent reads. Then you read the block in multiple frames.
    // We do this so we don't need to allocate a full 512 byte buffer in the
    // MSP430's memory. Instead we'll use smaller 64 byte buffers. This
    // means that an entire block will take 8 reads. The spiReadFrame command
    // reads in the given number of bytes into the byte array passed to it.
    // After reading all of the data in the block it should be unmounted.
    //volatile char result = mmcReadBlock(0, 64, block);
    //volatile char result = mmcMountBlock(0, 512);
    //volatile char result = mmcMountBlock(66048, 512);  // goes to FAT16
    volatile char result = mmcMountBlock(0, 512);

    volatile unsigned int interval_flash[64] = {0};

    unsigned int value = 0;
    //My FAT partition apparently starts at block 129 (0x81)
    //If you have a FAT16 filesystem you could read data from that point
    //Read in the block 64 bytes at a time
    if (result == MMC_SUCCESS)
    {
        volatile int i = 0;
        volatile int j = 0;
        volatile int c = 0;
        //8 blocks of 64 to read
        for (i = 0; i < 7; ++i)
        {
            //If you set a breakpoint here you can examine the memory in the card.
            spiReadFrame((void*)block, 64);
        }
        spiReadFrame((void*)block, 64); // block[6] after this has the x81 we need
        value = block[6];

        mmcUnmountBlock();

        // next memory location
        volatile unsigned long val = (unsigned long) value * 512;
        result = mmcMountBlock(val, 512);
        if(result == MMC_SUCCESS)
        {
            spiReadFrame((void*)block,64); // only need to read once to get bytes 17 and 18 (should be x0200 = 512.)

            //Read in the following bytes:
            // 14-15 Reserved sectors
            // 16    Number of FATs
            // 22-23 Sectors per FAT
            // 17-18 Number of root entries

            volatile unsigned int reserved = (unsigned int)block[15] << 8 | block[14];
            volatile unsigned int fat_num  = (unsigned int)block[16];
            volatile unsigned int fat_secs = (unsigned int)block[23]<<8 | block[22];
            volatile unsigned int num_roots = (unsigned int)block[18]<<8 | block[17];
            //The number of sectors until we reach the first data sector
            volatile unsigned long data_offset =  value + reserved + fat_num * fat_secs + num_roots * 32 / 512;
/**/            volatile unsigned int frequency[64] = {0};
            for(i=0; i < 7; i++)
            {
                spiReadFrame((void*)block,64);
            }

            mmcUnmountBlock();
            result = mmcMountBlock(data_offset*512, 512);
            if(result == MMC_SUCCESS)
            {
                for(i=0; i < 8; i++)
                {
                    spiReadFrame((void*)block, 64);
                    for (j=0; j<64; j++)
                    {                                   //check for the integer values and save them into a frequency array
                        if (block[j] > 0x30 && block[j] <= 0x39)
                        {
                            if (block[j+1] == 0x20 && j+1 < 64)
                            {
                                frequency[c] = block[j] - '0';
                                c++;
                                j=j+1;
                            }
                            else if (block[j+2] == 0x20 && j+2 < 64)
                            {
                                frequency[c] = 10*(block[j]-'0') + (block[j+1]-'0');
                                c++;
                                j=j+2;
                            }
                            else if (block[j+3] == 0x20 && j+3 < 64)
                            {
                                frequency[c] = 100*(block[j]-'0') + 10*(block[j+1]-'0') + (block[j+2]-'0');
                                c++;
                                j=j+3;
                            }
                            else if (block[j+4] == 0x20 && j+4 < 64)
                            {
                                frequency[c] = 1000*(block[j]-'0') + 100*(block[j+1]-'0') + 10*(block[j+2]-'0') + (block[j+3]-'0');
                                c++;
                                j=j+4;
                            }
                        }
                    }
                }
            }


            //flash the LED at certain speeds based on the frequency values given
            for (j=0; j<64; j++)
            {
                if (frequency[j] == '0')
                    break;
                interval_flash[j] = 16000 / frequency[j];
                if (interval_flash[j] == 65535)         //65535 is being saved for 16000 / 0
                    interval_flash[j] = 0;
            }

            mmcUnmountBlock();
        }
    }

    int duration_counter = 0;   //index of duration variable
    int length_counter = 0;     //counter
    while (1)
    {
        while(update_lock);
        steps++;
        length_counter++;

        //create pulse
        if(interval_flash[duration_counter] == steps)
        {
            buffer = table[sine_counter]+15;
            sine_counter++;
            steps = 0;
        }
        else
            buffer = 0;

        //if flash has occured for 1 second
        if(8000 == length_counter)
        {
            duration_counter++;

            if(interval_flash[duration_counter + 1] == '0')
                duration_counter = 0;

            length_counter = 0;
            steps = 0;
        }

        if(sine_counter >= 200)
            sine_counter = 0;

        //make sure we block until the interrupt reads the data
        update_lock = 1;
    }
}
